/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /** Read Root */
    get: operations["read_root__get"];
  };
  "/api/v1/login/access-token": {
    /**
     * Login Access Token
     * @description OAuth2 compatible token login, get an access token for future requests
     */
    post: operations["login_access_token_api_v1_login_access_token_post"];
  };
  "/api/v1/login/test-token": {
    /**
     * Test Token
     * @description Test access token
     */
    post: operations["test_token_api_v1_login_test_token_post"];
  };
  "/api/v1/password-recovery/{email}": {
    /**
     * Recover Password
     * @description Password Recovery
     */
    post: operations["recover_password_api_v1_password_recovery__email__post"];
  };
  "/api/v1/reset-password/": {
    /**
     * Reset Password
     * @description Reset password
     */
    post: operations["reset_password_api_v1_reset_password__post"];
  };
  "/api/v1/password-recovery-html-content/{email}": {
    /**
     * Recover Password Html Content
     * @description HTML Content for Password Recovery
     */
    post: operations["recover_password_html_content_api_v1_password_recovery_html_content__email__post"];
  };
  "/api/v1/login/google": {
    /** Login Google */
    get: operations["login_google_api_v1_login_google_get"];
  };
  "/api/v1/auth/google": {
    /** Auth */
    get: operations["auth_api_v1_auth_google_get"];
  };
  "/api/v1/users/": {
    /**
     * Read Users
     * @description Retrieve users.
     */
    get: operations["read_users_api_v1_users__get"];
    /**
     * Create User
     * @description Create new user.
     */
    post: operations["create_user_api_v1_users__post"];
  };
  "/api/v1/users/me": {
    /**
     * Read User Me
     * @description Get current user and the user's chat list.
     */
    get: operations["read_user_me_api_v1_users_me_get"];
    /**
     * Delete User Me
     * @description Delete own user.
     */
    delete: operations["delete_user_me_api_v1_users_me_delete"];
    /**
     * Update User Me
     * @description Update own user.
     */
    patch: operations["update_user_me_api_v1_users_me_patch"];
  };
  "/api/v1/users/me/password": {
    /**
     * Update Password Me
     * @description Update own password.
     */
    patch: operations["update_password_me_api_v1_users_me_password_patch"];
  };
  "/api/v1/users/signup": {
    /**
     * Register User
     * @description Create new user without the need to be logged in.
     */
    post: operations["register_user_api_v1_users_signup_post"];
  };
  "/api/v1/users/{user_id}": {
    /**
     * Read User By Id
     * @description Get a specific user by id.
     */
    get: operations["read_user_by_id_api_v1_users__user_id__get"];
    /**
     * Delete User
     * @description Delete a user.
     */
    delete: operations["delete_user_api_v1_users__user_id__delete"];
    /**
     * Update User
     * @description Update a user.
     */
    patch: operations["update_user_api_v1_users__user_id__patch"];
  };
  "/api/v1/utils/test-email/": {
    /**
     * Test Email
     * @description Test emails.
     */
    post: operations["test_email_api_v1_utils_test_email__post"];
  };
  "/api/v1/items/": {
    /**
     * Read Items
     * @description Retrieve items.
     */
    get: operations["read_items_api_v1_items__get"];
    /**
     * Create Item
     * @description Create new item.
     */
    post: operations["create_item_api_v1_items__post"];
  };
  "/api/v1/items/{id}": {
    /**
     * Read Item
     * @description Get item by ID.
     */
    get: operations["read_item_api_v1_items__id__get"];
    /**
     * Update Item
     * @description Update an item.
     */
    put: operations["update_item_api_v1_items__id__put"];
    /**
     * Delete Item
     * @description Delete an item.
     */
    delete: operations["delete_item_api_v1_items__id__delete"];
  };
  "/api/v1/chat/config": {
    /**
     * Read Chat Config
     * @description Retrieve chat config from db.
     */
    get: operations["read_chat_config_api_v1_chat_config_get"];
    /**
     * Update Chat Config
     * @description Update chat config.
     */
    put: operations["update_chat_config_api_v1_chat_config_put"];
    /**
     * Create Chat Config
     * @description Create chat config.
     */
    post: operations["create_chat_config_api_v1_chat_config_post"];
  };
  "/api/v1/chat/": {
    /** Chat Handler */
    post: operations["chat_handler_api_v1_chat__post"];
  };
  "/api/v1/chat/stream": {
    /** Chat Stream Handler */
    post: operations["chat_stream_handler_api_v1_chat_stream_post"];
  };
  "/api/v1/chat/chat_list": {
    /**
     * Get Chat List
     * @description Get a list of chats belong to the given user.
     */
    get: operations["get_chat_list_api_v1_chat_chat_list_get"];
  };
  "/api/v1/chat/{chat_id}": {
    /**
     * Get Chat
     * @description Get chat history.
     */
    get: operations["get_chat_api_v1_chat__chat_id__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_login_access_token_api_v1_login_access_token_post */
    Body_login_access_token_api_v1_login_access_token_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** ChatConfigBase */
    ChatConfigBase: {
      /** Model */
      model: string;
      /** Temperature */
      temperature: number;
      /** Top P */
      top_p?: number | null;
      /** Top K */
      top_k?: number | null;
      /** System Message */
      system_message?: string | null;
    };
    /** ChatConfigCreate */
    ChatConfigCreate: {
      /** Model */
      model: string;
      /** Temperature */
      temperature: number;
      /** Top P */
      top_p?: number | null;
      /** Top K */
      top_k?: number | null;
      /** System Message */
      system_message?: string | null;
      /** Api Key */
      api_key?: string | null;
    };
    /** ChatConfigPublic */
    ChatConfigPublic: {
      /** Model */
      model: string;
      /** Api Key */
      api_key?: string | null;
      /** Temperature */
      temperature: number;
      /** Top P */
      top_p?: number | null;
      /** Top K */
      top_k?: number | null;
      /** System Message */
      system_message?: string | null;
    };
    /** ChatPublic */
    ChatPublic: {
      /** Id */
      id: string;
      /** Messages */
      messages: components["schemas"]["Message"][];
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Owner Id */
      owner_id: number;
    };
    /** ChatRequest */
    ChatRequest: {
      /** Input */
      input: string;
      /** Messages */
      messages: components["schemas"]["Message"][];
      /** Chat Id */
      chat_id: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** ItemCreate */
    ItemCreate: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
    };
    /** ItemPublic */
    ItemPublic: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /** Id */
      id: number;
      /** Owner Id */
      owner_id: number;
    };
    /** ItemUpdate */
    ItemUpdate: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
    };
    /** ItemsPublic */
    ItemsPublic: {
      /** Data */
      data: components["schemas"]["ItemPublic"][];
      /** Count */
      count: number;
    };
    /** Message */
    Message: {
      /** Role */
      role: string;
      /** Content */
      content: string;
      /** Function Call */
      function_call?: string | null;
      /** Tool Call */
      tool_call?: string | null;
    };
    /** NewPassword */
    NewPassword: {
      /** Token */
      token: string;
      /** New Password */
      new_password: string;
    };
    /** Token */
    Token: {
      /** Access Token */
      access_token: string;
      /**
       * Token Type
       * @default bearer
       */
      token_type?: string;
    };
    /** UpdatePassword */
    UpdatePassword: {
      /** Current Password */
      current_password: string;
      /** New Password */
      new_password: string;
    };
    /** UserCreate */
    UserCreate: {
      /** Email */
      email: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser?: boolean;
      /** Full Name */
      full_name?: string | null;
      /** Password */
      password: string;
    };
    /** UserPublic */
    UserPublic: {
      /** Email */
      email: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser?: boolean;
      /** Full Name */
      full_name?: string | null;
      /** Id */
      id: number;
      /** Chatlist */
      chatList?: unknown[] | null;
    };
    /** UserRegister */
    UserRegister: {
      /** Email */
      email: string;
      /** Password */
      password: string;
      /** Full Name */
      full_name?: string | null;
    };
    /** UserUpdate */
    UserUpdate: {
      /** Email */
      email?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser?: boolean;
      /** Full Name */
      full_name?: string | null;
      /** Password */
      password?: string | null;
    };
    /** UserUpdateMe */
    UserUpdateMe: {
      /** Full Name */
      full_name?: string | null;
      /** Email */
      email?: string | null;
    };
    /** UsersPublic */
    UsersPublic: {
      /** Data */
      data: components["schemas"]["UserPublic"][];
      /** Count */
      count: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Read Root */
  read_root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Login Access Token
   * @description OAuth2 compatible token login, get an access token for future requests
   */
  login_access_token_api_v1_login_access_token_post: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login_access_token_api_v1_login_access_token_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Test Token
   * @description Test access token
   */
  test_token_api_v1_login_test_token_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
    };
  };
  /**
   * Recover Password
   * @description Password Recovery
   */
  recover_password_api_v1_password_recovery__email__post: {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Reset Password
   * @description Reset password
   */
  reset_password_api_v1_reset_password__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewPassword"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Recover Password Html Content
   * @description HTML Content for Password Recovery
   */
  recover_password_html_content_api_v1_password_recovery_html_content__email__post: {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Login Google */
  login_google_api_v1_login_google_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Auth */
  auth_api_v1_auth_google_get: {
    parameters: {
      query: {
        code: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Users
   * @description Retrieve users.
   */
  read_users_api_v1_users__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UsersPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create User
   * @description Create new user.
   */
  create_user_api_v1_users__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User Me
   * @description Get current user and the user's chat list.
   */
  read_user_me_api_v1_users_me_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
    };
  };
  /**
   * Delete User Me
   * @description Delete own user.
   */
  delete_user_me_api_v1_users_me_delete: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
    };
  };
  /**
   * Update User Me
   * @description Update own user.
   */
  update_user_me_api_v1_users_me_patch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateMe"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Password Me
   * @description Update own password.
   */
  update_password_me_api_v1_users_me_password_patch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePassword"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Register User
   * @description Create new user without the need to be logged in.
   */
  register_user_api_v1_users_signup_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRegister"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User By Id
   * @description Get a specific user by id.
   */
  read_user_by_id_api_v1_users__user_id__get: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User
   * @description Delete a user.
   */
  delete_user_api_v1_users__user_id__delete: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update User
   * @description Update a user.
   */
  update_user_api_v1_users__user_id__patch: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Test Email
   * @description Test emails.
   */
  test_email_api_v1_utils_test_email__post: {
    parameters: {
      query: {
        email_to: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Items
   * @description Retrieve items.
   */
  read_items_api_v1_items__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemsPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Item
   * @description Create new item.
   */
  create_item_api_v1_items__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Item
   * @description Get item by ID.
   */
  read_item_api_v1_items__id__get: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Item
   * @description Update an item.
   */
  update_item_api_v1_items__id__put: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Item
   * @description Delete an item.
   */
  delete_item_api_v1_items__id__delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Chat Config
   * @description Retrieve chat config from db.
   */
  read_chat_config_api_v1_chat_config_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ChatConfigPublic"];
        };
      };
    };
  };
  /**
   * Update Chat Config
   * @description Update chat config.
   */
  update_chat_config_api_v1_chat_config_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatConfigCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ChatConfigPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Chat Config
   * @description Create chat config.
   */
  create_chat_config_api_v1_chat_config_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatConfigCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ChatConfigBase"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Chat Handler */
  chat_handler_api_v1_chat__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Chat Stream Handler */
  chat_stream_handler_api_v1_chat_stream_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Chat List
   * @description Get a list of chats belong to the given user.
   */
  get_chat_list_api_v1_chat_chat_list_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>[];
        };
      };
    };
  };
  /**
   * Get Chat
   * @description Get chat history.
   */
  get_chat_api_v1_chat__chat_id__get: {
    parameters: {
      path: {
        chat_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ChatPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
