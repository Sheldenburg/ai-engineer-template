/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/login/access-token": {
    /**
     * Login Access Token
     * @description OAuth2 compatible token login, get an access token for future requests
     */
    post: operations["login-login_access_token"];
  };
  "/api/v1/login/test-token": {
    /**
     * Test Token
     * @description Test access token
     */
    post: operations["login-test_token"];
  };
  "/api/v1/password-recovery/{email}": {
    /**
     * Recover Password
     * @description Password Recovery
     */
    post: operations["login-recover_password"];
  };
  "/api/v1/reset-password/": {
    /**
     * Reset Password
     * @description Reset password
     */
    post: operations["login-reset_password"];
  };
  "/api/v1/password-recovery-html-content/{email}": {
    /**
     * Recover Password Html Content
     * @description HTML Content for Password Recovery
     */
    post: operations["login-recover_password_html_content"];
  };
  "/api/v1/users/": {
    /**
     * Read Users
     * @description Retrieve users.
     */
    get: operations["users-read_users"];
    /**
     * Create User
     * @description Create new user.
     */
    post: operations["users-create_user"];
  };
  "/api/v1/users/me": {
    /**
     * Read User Me
     * @description Get current user.
     */
    get: operations["users-read_user_me"];
    /**
     * Delete User Me
     * @description Delete own user.
     */
    delete: operations["users-delete_user_me"];
    /**
     * Update User Me
     * @description Update own user.
     */
    patch: operations["users-update_user_me"];
  };
  "/api/v1/users/me/password": {
    /**
     * Update Password Me
     * @description Update own password.
     */
    patch: operations["users-update_password_me"];
  };
  "/api/v1/users/signup": {
    /**
     * Register User
     * @description Create new user without the need to be logged in.
     */
    post: operations["users-register_user"];
  };
  "/api/v1/users/{user_id}": {
    /**
     * Read User By Id
     * @description Get a specific user by id.
     */
    get: operations["users-read_user_by_id"];
    /**
     * Delete User
     * @description Delete a user.
     */
    delete: operations["users-delete_user"];
    /**
     * Update User
     * @description Update a user.
     */
    patch: operations["users-update_user"];
  };
  "/api/v1/utils/test-email/": {
    /**
     * Test Email
     * @description Test emails.
     */
    post: operations["utils-test_email"];
  };
  "/api/v1/items/": {
    /**
     * Read Items
     * @description Retrieve items.
     */
    get: operations["items-read_items"];
    /**
     * Create Item
     * @description Create new item.
     */
    post: operations["items-create_item"];
  };
  "/api/v1/items/{id}": {
    /**
     * Read Item
     * @description Get item by ID.
     */
    get: operations["items-read_item"];
    /**
     * Update Item
     * @description Update an item.
     */
    put: operations["items-update_item"];
    /**
     * Delete Item
     * @description Delete an item.
     */
    delete: operations["items-delete_item"];
  };
  "/api/v1/chat/config": {
    /**
     * Read Chat Config
     * @description Retrieve chat config from db.
     */
    get: operations["chat-read_chat_config"];
    /**
     * Create Chat Config
     * @description Create chat config.
     */
    put: operations["chat-create_chat_config"];
    /**
     * Create Chat Config
     * @description Create chat config.
     */
    post: operations["chat-create_chat_config"];
  };
  "/api/v1/chat/": {
    /** Chat Handler */
    post: operations["chat-chat_handler"];
  };
  "/api/v1/chat/stream": {
    /** Chat Stream Handler */
    post: operations["chat-chat_stream_handler"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_login-login_access_token */
    "Body_login-login_access_token": {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** ChatConfigBase */
    ChatConfigBase: {
      /** Model */
      model: string;
      /** Temperature */
      temperature: number;
      /** Top P */
      top_p?: number | null;
      /** Top K */
      top_k?: number | null;
      /** System Message */
      system_message?: string | null;
    };
    /** ChatConfigCreate */
    ChatConfigCreate: {
      /** Model */
      model: string;
      /** Temperature */
      temperature: number;
      /** Top P */
      top_p?: number | null;
      /** Top K */
      top_k?: number | null;
      /** System Message */
      system_message?: string | null;
      /** Api Key */
      api_key?: string | null;
    };
    /** ChatConfigPublic */
    ChatConfigPublic: {
      /** Model */
      model: string;
      /** Api Key */
      api_key?: string | null;
      /** Temperature */
      temperature: number;
      /** Top P */
      top_p?: number | null;
      /** Top K */
      top_k?: number | null;
      /** System Message */
      system_message?: string | null;
    };
    /** ChatRequest */
    ChatRequest: {
      /** Input */
      input: string;
      /** Messages */
      messages: components["schemas"]["Message-Input"][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** ItemCreate */
    ItemCreate: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
    };
    /** ItemPublic */
    ItemPublic: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /** Id */
      id: number;
      /** Owner Id */
      owner_id: number;
    };
    /** ItemUpdate */
    ItemUpdate: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
    };
    /** ItemsPublic */
    ItemsPublic: {
      /** Data */
      data: components["schemas"]["ItemPublic"][];
      /** Count */
      count: number;
    };
    /** Message */
    "Message-Input": {
      /** Content */
      content: string;
      /** Role */
      role: string;
      /** Function Call */
      function_call?: string | null;
      /** Tool Call */
      tool_call?: string | null;
    };
    /** Message */
    "Message-Output": {
      /** Message */
      message: string;
    };
    /** NewPassword */
    NewPassword: {
      /** Token */
      token: string;
      /** New Password */
      new_password: string;
    };
    /** Token */
    Token: {
      /** Access Token */
      access_token: string;
      /**
       * Token Type
       * @default bearer
       */
      token_type?: string;
    };
    /** UpdatePassword */
    UpdatePassword: {
      /** Current Password */
      current_password: string;
      /** New Password */
      new_password: string;
    };
    /** UserCreate */
    UserCreate: {
      /** Email */
      email: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser?: boolean;
      /** Full Name */
      full_name?: string | null;
      /** Password */
      password: string;
    };
    /** UserPublic */
    UserPublic: {
      /** Email */
      email: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser?: boolean;
      /** Full Name */
      full_name?: string | null;
      /** Id */
      id: number;
    };
    /** UserRegister */
    UserRegister: {
      /** Email */
      email: string;
      /** Password */
      password: string;
      /** Full Name */
      full_name?: string | null;
    };
    /** UserUpdate */
    UserUpdate: {
      /** Email */
      email?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /**
       * Is Superuser
       * @default false
       */
      is_superuser?: boolean;
      /** Full Name */
      full_name?: string | null;
      /** Password */
      password?: string | null;
    };
    /** UserUpdateMe */
    UserUpdateMe: {
      /** Full Name */
      full_name?: string | null;
      /** Email */
      email?: string | null;
    };
    /** UsersPublic */
    UsersPublic: {
      /** Data */
      data: components["schemas"]["UserPublic"][];
      /** Count */
      count: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Login Access Token
   * @description OAuth2 compatible token login, get an access token for future requests
   */
  "login-login_access_token": {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login-login_access_token"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Test Token
   * @description Test access token
   */
  "login-test_token": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
    };
  };
  /**
   * Recover Password
   * @description Password Recovery
   */
  "login-recover_password": {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Reset Password
   * @description Reset password
   */
  "login-reset_password": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewPassword"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Recover Password Html Content
   * @description HTML Content for Password Recovery
   */
  "login-recover_password_html_content": {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Users
   * @description Retrieve users.
   */
  "users-read_users": {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UsersPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create User
   * @description Create new user.
   */
  "users-create_user": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User Me
   * @description Get current user.
   */
  "users-read_user_me": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
    };
  };
  /**
   * Delete User Me
   * @description Delete own user.
   */
  "users-delete_user_me": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
    };
  };
  /**
   * Update User Me
   * @description Update own user.
   */
  "users-update_user_me": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateMe"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Password Me
   * @description Update own password.
   */
  "users-update_password_me": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePassword"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Register User
   * @description Create new user without the need to be logged in.
   */
  "users-register_user": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRegister"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User By Id
   * @description Get a specific user by id.
   */
  "users-read_user_by_id": {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User
   * @description Delete a user.
   */
  "users-delete_user": {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update User
   * @description Update a user.
   */
  "users-update_user": {
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Test Email
   * @description Test emails.
   */
  "utils-test_email": {
    parameters: {
      query: {
        email_to: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Items
   * @description Retrieve items.
   */
  "items-read_items": {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemsPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Item
   * @description Create new item.
   */
  "items-create_item": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Item
   * @description Get item by ID.
   */
  "items-read_item": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Item
   * @description Update an item.
   */
  "items-update_item": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Item
   * @description Delete an item.
   */
  "items-delete_item": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-Output"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Chat Config
   * @description Retrieve chat config from db.
   */
  "chat-read_chat_config": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ChatConfigPublic"];
        };
      };
    };
  };
  /**
   * Create Chat Config
   * @description Create chat config.
   */
  "chat-create_chat_config": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatConfigCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ChatConfigBase"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Chat Handler */
  "chat-chat_handler": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Chat Stream Handler */
  "chat-chat_stream_handler": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
